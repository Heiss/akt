public_url: http://akt.local # redirect_url will be derived from this
version: 1.1
services:
  - servicename: zenodo
    protocol: oauth2 # optional, defaults: oauth2, options: [oauth2, grpc, ... (more to come)]
    client_id: ABC
    client_secret: XYZ
    api_url: http://zenodo.org/api
    authenticate_url: http://zenodo.org/oauth/auth
    refresh_url: http://zenodo.org/oauth/token
    response_type: code
    # optional, will be used to validate requests / responses, when there is no jsonschema
    openapi: http://zenodo.org/openapi
  - servicename: openscienceframework
    client_id: AABC
    client_secret: XXYZ
    api_url: http://osf.org/api/v3
    authenticate_url: http://osf.org/oauth/authorize
    refresh_url: http://osf.org/oauth/token
    response_type: code
    # if scope available in oauth / oidc and needed to be set for datapoints to get access
    scope:
      - users
      - projects
  - servicename: reva
    # TODO: add http-to-grpc gateway with streaming support
    # https://github.com/grpc-ecosystem/grpc-gateway
    # https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter
    # https://medium.com/@ErrInDam/json-http-transcoding-to-grpc-using-envoy-934ffe343983
    # https://cloud.google.com/endpoints/docs/grpc/transcoding
    protocol: grpc
    # to change it properly in datapoints
    protobufs: http://github.org/reva/protobufs
  # provide an url for an external schema, so we can copy configurations
  - url: http://serviceapi.com/v0.1/schema.yml
    service: serviceapi # lookup this servicename in provided yml-file
    servicename: service # optional, rename the service for avoiding name collision
datapoints:
  - service: service
    endpoints: # only import this endpoints from provided yml-file
      - endpoint: /api
        from: zenodo # optional: from which service, /api should be looked up. If not provided, will be looked up through all provided services and select first appearance
  - service: zenodo
    endpoints:
      - endpoint: /depositions
        name: getDepoEP
        field: [data, depositions]
        # cache the response, structure: "([0-9]+)([a-zA-Z]+)"; e.g. 24h 35mi 1mo 2y 60s 3d
        cache: 24h
        # no schema defined, so it will be checked, if there is an openapi spec.
      - endpoint: /depositions/<[idDepo]>
        name: setDeposition
        method: PUT
        stream: true
        schema: >
          {
            "$schema": "http://json-schema.org/schema#",
            "Title": "Deposition",
            "type": "object",
            "properties": {
              "id": {
                "type":"integer",
                "minimum": 0
              },
              "data": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description":{
                    "type": "string"
                  }
                }
              }
            }
          }
        # data will not be checked against schema, because schema only validates against responses, not requests
        data: >
          {
            "id": <[idZenodo]>,
            "data": {
              "title": "<[title]>",
              "description": "<[description]>"
            }
          }
  - service: openscienceframework
    endpoints:
      - endpoints: /projects
        name: getProjEP
        fields:
          - name: listProjects
            field: [projects]
        schema: >
          {
            "$schema": "http://json-schema.org/schema#",
            "Title": "Projects",
            "type": "object",
            "properties": {
              "projects": {
                "type": "object",
                "properties": {
                "id": {
                  "type":"integer",
                  "minimum": 0
                },
                "title": {
                  "type": "string"
                },
                "description":{
                  "type": "string"
                }
              }
            }
          }
      - endpoints: /projects
        name: setProject
        schema: >
          {
            "$schema": "http://json-schema.org/schema#",
            "Title": "Project",
            "type": "object",
            "properties": {
              "project": {
                "type": "object",
                "properties": {
                "id": {
                  "type":"integer",
                  "minimum": 0
                },
                "title": {
                  "type": "string"
                },
                "description":{
                  "type": "string"
                }
              }
            }
          }
        data: >
          {
            "project": {
              "id": "<[idProject]>",
              "title": "<[title]>",
              "description": "<[description]>"
            }
          }
endpoints:
  - endpoint: /list
    datapoints:
      - getDepoEP
      - getProjEP
    merge: # returns a list with the given fields. If fields are objects use a simple append, respect update setting. If fields are lists, respect algorithm.
      # fields does not have to be equal
      # schema (jsonschema) can be specified, then it will ignore elements, which does not fit.
      - fields:
          - getDepoEP # derived from datapoint name, because only one field specified above
          - listProjects
        name: lists
        # options: append (second list after the first list), alternate (first element from first list, second from second list, third from first list,...), sort (need a key value to for sort)
        # default: append
        algorithm: sort
        algorithm_key: key
        # options: override (overrides key, when already exists), skip (the first value will be hold), rename (append the index to the key-name like "key1", "key2"... )
        # default: skip
        update: override
    schema: >
      {
        userDepositions: <[lists]>
      }
  - endpoint: /list
    name: updateProjects # does not need, but it makes it easier to handle workflows
    method: PUT
    datapoints:
      - setDeposition
      - setProject
    schema: >
      {
        "$schema": "http://json-schema.org/schema#",
        "Title": "Deposition",
        "type": "object",
        "properties": {
          "idZenodo": {
            "type":"integer",
            "minimum": 0
          },
          "idProject": {
            "type":"integer",
            "minimum": 0
          },
          "data":{
            "type":"object",
            "properties":{
              "title": {
                "type": "string"
              },
              "description":{
                "type": "string"
              }
            }
          }
        }
      }
    fields:
      - name: idDepo
        field: [idZenodo]
      - name: idProj
        field: [idProject]
      - name: title
        field: [data, title]
      - name: description
        field: [data, "description"]
workflows: # enables custom flows without the need of an extra microservice. use response data from one endpoint as input data for another endpoint
  - name: uploadFiles # for easier access in other workflows
    endpoint: /triggerSync # new endpoint to trigger this flow
    method: POST # defaults to GET
    # TODO: think about a non cyclic directed graph
    flow: # one step after another. 
      - endpoint: /list # first trigger this endpoint to get data. Method defaults to GET
      - endpoint: /list # use data of previous endpoint and send it as data to this endpoint with the configured method
        method: PUT
  - name: exampleWorkflow
    endpoint: /testTrigger
    flow:
      - name: uploadFiles
      #- endpoint: /list
      #  method: PUT
      - name: updateProjects
